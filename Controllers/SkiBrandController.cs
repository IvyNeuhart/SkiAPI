using Microsoft.AspNetCore.Mvc;
using SkiAPI.Models;
using SkiAPI.Repositories;
using SkiBrandAPI.Models.Requests;

namespace SkiBrandAPI.Controllers
{
    [Route("[controller]")]
    [ApiController]
    public class SkiBrandController : ControllerBase
    {
        private readonly SkiDbContext dbContext;

        // Constructor to inject the DbContext
        public SkiBrandController(SkiDbContext context)
        {
            dbContext = context;
        }

        [HttpPost("", Name = "CreateSkiBrand")]
        public SkiBrand CreateSkiBrand(SkiBrandCreateRequest request){
            // Map the ski brand create request to the actual ski brand.
            SkiBrand skiBrand = new SkiBrand();
            skiBrand.Name = request.Name;
            skiBrand.DateFounded = request.DateFounded;
            skiBrand.Description = request.Description;

            // Add the ski brand to the list of ski brands (in our C# code only)
            dbContext.SkiBrands.Add(skiBrand);

            // Save the modification (adding our ski brand to our DbSet) to the database.
            dbContext.SaveChanges();

            // Return the created ski brand to the requester.
            // This will include the ID that was generated by MSSQL Server!
            return skiBrand;

        }

        [HttpGet("{id}", Name = "GetSkiBrandById")]
        public SkiBrand? GetSkiBrandById(int id) {
            // Returns the SkiBrand with the given id (or null if not found).
            return dbContext.SkiBrands.Find(id);
        }

        [HttpGet("", Name = "GetSkiBrands")]
        public List<SkiBrand> GetSkiBrands() {
            // Returns the list of ski brands (or an empty collection if none existed).
            return dbContext.SkiBrands.ToList();
        }

        [HttpPut("{id}", Name = "UpdateSkiBrandById")]
        public SkiBrand UpdateSkiBrandById(int id, SkiBrandCreateRequest request) {
            // Find the ski brand we need to update by its ID.
            SkiBrand? skiBrandToUpdate = dbContext.SkiBrands.Find(id);

            // If it's null (not found) throw an exception stating such.
            // In later modules we will explore custom exceptions and exception handling.
            // For now, a base Exception is fine.
            if (skiBrandToUpdate == null) {
                throw new Exception($"Ski Brand {id} was not found.");
            }

            // Map our updated data to our existing ski brand.
            skiBrandToUpdate.DateFounded = request.DateFounded;
            skiBrandToUpdate.Description = request.Description;
            skiBrandToUpdate.Name = request.Name;

            // Save our changes executes an UPDATE SQL statement).
            dbContext.SaveChanges();

            // Return our updated ski brand to the requester.
            return skiBrandToUpdate;
        }

        [HttpDelete("{id}", Name = "DeleteSkiBrandById")]
        public void DeleteSkiBrandById(int id) {
            // Find the ski brand we need to delete by its ID.
            SkiBrand? skiBrandToDelete = dbContext.SkiBrands.Find(id);

            if (skiBrandToDelete == null) {
                throw new Exception($"Ski brand {id} was not found.");
            }

            // Mark the entity as deleted in the EF change tracker.
            dbContext.SkiBrands.Remove(skiBrandToDelete);
            dbContext.SaveChanges(); // Execute the DELETE SQL statement.
        }
    }
}